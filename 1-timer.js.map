{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport '../css/1-timer.css';\n\nlet userSelectedDate;\nconst startBtn = document.querySelector('button');\n\nconst dateInput = document.getElementById('datetime-picker');\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n\n    if (selectedDate < Date.now()) {\n      startBtn.disabled = true;\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n      });\n    } else if (selectedDate > Date.now()) {\n      startBtn.disabled = false;\n      userSelectedDate = selectedDate;\n    }\n  },\n};\n\nflatpickr(dateInput, options);\n\n// Start timer\nstartBtn.addEventListener('click', () => {\n  startBtn.disabled = true;\n  dateInput.disabled = true;\n\n  const intervalId = setInterval(() => {\n    const currentDate = Date.now();\n    const deltaTime = userSelectedDate - currentDate;\n    const { days, hours, minutes, seconds } = convertMs(deltaTime);\n\n    if (deltaTime < 0) {\n      clearInterval(intervalId);\n      startBtn.disabled = false;\n      dateInput.disabled = false;\n      iziToast.success({\n        title: 'Success',\n        message: 'Timer has finished!',\n      });\n    }\n\n    function pad(value) {\n      return String(value).padStart(2, '0');\n    }\n\n    document.querySelector('[data-days]').textContent = pad(days);\n    document.querySelector('[data-hours]').textContent = pad(hours);\n    document.querySelector('[data-minutes]').textContent = pad(minutes);\n    document.querySelector('[data-seconds]').textContent = pad(seconds);\n  }, 1000);\n});\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["userSelectedDate","startBtn","dateInput","options","selectedDates","selectedDate","iziToast","flatpickr","intervalId","currentDate","deltaTime","days","hours","minutes","seconds","convertMs","pad","value","ms"],"mappings":"0IAMA,IAAIA,EACJ,MAAMC,EAAW,SAAS,cAAc,QAAQ,EAE1CC,EAAY,SAAS,eAAe,iBAAiB,EACrDC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAEhCC,EAAe,KAAK,OACtBJ,EAAS,SAAW,GACpBK,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,GACQD,EAAe,KAAK,QAC7BJ,EAAS,SAAW,GACpBD,EAAmBK,EAEtB,CACH,EAEAE,EAAUL,EAAWC,CAAO,EAG5BF,EAAS,iBAAiB,QAAS,IAAM,CACvCA,EAAS,SAAW,GACpBC,EAAU,SAAW,GAErB,MAAMM,EAAa,YAAY,IAAM,CACnC,MAAMC,EAAc,KAAK,MACnBC,EAAYV,EAAmBS,EAC/B,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAS,EAEzDA,EAAY,IACd,cAAcF,CAAU,EACxBP,EAAS,SAAW,GACpBC,EAAU,SAAW,GACrBI,EAAS,QAAQ,CACf,MAAO,UACP,QAAS,qBACjB,CAAO,GAGH,SAASU,EAAIC,EAAO,CAClB,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACrC,CAED,SAAS,cAAc,aAAa,EAAE,YAAcD,EAAIL,CAAI,EAC5D,SAAS,cAAc,cAAc,EAAE,YAAcK,EAAIJ,CAAK,EAC9D,SAAS,cAAc,gBAAgB,EAAE,YAAcI,EAAIH,CAAO,EAClE,SAAS,cAAc,gBAAgB,EAAE,YAAcG,EAAIF,CAAO,CACnE,EAAE,GAAI,CACT,CAAC,EAED,SAASC,EAAUG,EAAI,CAQrB,MAAMP,EAAO,KAAK,MAAMO,EAAK,KAAG,EAE1BN,EAAQ,KAAK,MAAOM,EAAK,MAAO,IAAI,EAEpCL,EAAU,KAAK,MAAQK,EAAK,MAAO,KAAQ,GAAM,EAEjDJ,EAAU,KAAK,MAASI,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAP,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}